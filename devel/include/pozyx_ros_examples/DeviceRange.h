// Generated by gencpp from file pozyx_ros_examples/DeviceRange.msg
// DO NOT EDIT!


#ifndef POZYX_ROS_EXAMPLES_MESSAGE_DEVICERANGE_H
#define POZYX_ROS_EXAMPLES_MESSAGE_DEVICERANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pozyx_ros_examples
{
template <class ContainerAllocator>
struct DeviceRange_
{
  typedef DeviceRange_<ContainerAllocator> Type;

  DeviceRange_()
    : timestamp(0)
    , distance(0)
    , RSS(0)  {
    }
  DeviceRange_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , distance(0)
    , RSS(0)  {
  (void)_alloc;
    }



   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _distance_type;
  _distance_type distance;

   typedef int16_t _RSS_type;
  _RSS_type RSS;





  typedef boost::shared_ptr< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceRange_

typedef ::pozyx_ros_examples::DeviceRange_<std::allocator<void> > DeviceRange;

typedef boost::shared_ptr< ::pozyx_ros_examples::DeviceRange > DeviceRangePtr;
typedef boost::shared_ptr< ::pozyx_ros_examples::DeviceRange const> DeviceRangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pozyx_ros_examples

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pozyx_ros_examples': ['/home/robot/charlie_ws/src/pozyx_ros_examples/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e707b9b9136043c8fb64f18e44f685a";
  }

  static const char* value(const ::pozyx_ros_examples::DeviceRange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e707b9b9136043cULL;
  static const uint64_t static_value2 = 0x8fb64f18e44f685aULL;
};

template<class ContainerAllocator>
struct DataType< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pozyx_ros_examples/DeviceRange";
  }

  static const char* value(const ::pozyx_ros_examples::DeviceRange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 timestamp\n\
uint32 distance\n\
int16 RSS\n\
";
  }

  static const char* value(const ::pozyx_ros_examples::DeviceRange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.distance);
      stream.next(m.RSS);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceRange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pozyx_ros_examples::DeviceRange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pozyx_ros_examples::DeviceRange_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "distance: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.distance);
    s << indent << "RSS: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RSS);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POZYX_ROS_EXAMPLES_MESSAGE_DEVICERANGE_H
